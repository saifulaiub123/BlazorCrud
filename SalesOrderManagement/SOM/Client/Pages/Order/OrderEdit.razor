@page "/order-edit/{Id:int}"
@using AutoMapper;
@using SOM.Client.Pages.Element.Modal;
@using SOM.Client.Pages.Window.Modal;
@using SOM.Core.Model;
@using SOM.Core.ViewModel;
@using SOM.Shared;
@using System.Net;

@inject HttpClient Http
@inject NavigationManager Navigation
@inject DialogService DialogService
@inject NotificationService NotificationService
@implements IDisposable

<h3>Order Edit</h3>
<div class="container-fluid">
    <div class="row">
        <div class="col-md-6">
            <RadzenFieldset Text="Basic Info">
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Name" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox style="width: 100%;" Name="Name" @bind-Value="@order.Name" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Quantity" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox style="width: 100%;" Name="Name" @bind-Value="@order.State" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <input type="button" class="btn btn-primary" @onclick="@UpdateOrder" value="Update" />
                            <input type="button" class="btn btn-primary" @onclick="@Cancel" value="Cancel" />
                        </div>
                    </div>
                </div>
            </RadzenFieldset>
            <RadzenFieldset Text="Windows">
                <RadzenButton Text="Add Windows" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Info" Click=@AddWindows></RadzenButton>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">Id</th>
                                <th scope="col">Name</th>
                                <th scope="col">Quantity</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var selectedWindow in selectedWindows)
                            {
                                <tr>
                                    <td>@selectedWindow.Id</td>
                                    <td>@selectedWindow.WindowName</td>
                                    <td>@selectedWindow.WindowQuantity</td>
                                    <td>
                                        <RadzenButton Text="Delete" Icon="delete" ButtonStyle="ButtonStyle.Light" Click=@(args => RemoveWindow((int)@selectedWindow.Id))></RadzenButton>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </RadzenFieldset>
        </div>
    </div>
</div>

@code {
    [Inject]
    protected IMapper Mapper { get; set; }
    [Parameter]
    public int Id { get; set; }


    OrderViewModel order = new OrderViewModel();
    List<OrderWindowViewModel> selectedWindows = new List<OrderWindowViewModel>();

    protected override async Task OnInitializedAsync()
    {
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;

        order = await Http.GetFromJsonAsync<OrderViewModel>("/api/Order/GetById?id=" + Id);
        selectedWindows = await Http.GetFromJsonAsync<List<OrderWindowViewModel>>("/api/OrderWindow/GetByOrderId?id=" + Id);
    }
    protected async void UpdateOrder()
    {
        var data = Mapper.Map<OrderModel>(order);
        var res = await Http.PutAsJsonAsync("/api/Order/Update", data);
        if (res.StatusCode == HttpStatusCode.OK)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Successfull", Detail = "Successfully Updated", Duration = 5000 });
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Something Went Wrong", Duration = 4000 });
        }
        StateHasChanged();
    }
    protected void Cancel()
    {
        Navigation.NavigateTo("order-list");
    }
    protected async void AddWindows()
    {
        var orderWindowModel = new List<OrderWindowModel>();
        List<WindowViewModel> data = await DialogService.OpenAsync<WindowListSelect>("Window List",
               null,
               new DialogOptions() { Width = "700px", Height = "512px", Resizable = true, Draggable = true });
        foreach (var obj in data)
        {
            orderWindowModel.Add(new OrderWindowModel()
            {
                OrderId = Id,
                WindowId = (int)obj.Id
            });
        }

        var res = await Http.PostAsJsonAsync("/api/OrderWindow/AddBulk", orderWindowModel);
        if (res.StatusCode == HttpStatusCode.OK)
        {
            var resData = await res.Content.ReadFromJsonAsync<List<OrderWindowViewModel>>();
            selectedWindows.AddRange((List<OrderWindowViewModel>)resData);
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Successfull", Detail = "Added Successfully", Duration = 5000 });
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Something Went Wrong", Duration = 4000 });
        }
        StateHasChanged();
    }
    protected async void RemoveWindow(int id)
    {
        var res = await Http.DeleteAsync("/api/OrderWindow/Delete?id=" + id);
        if (res.StatusCode == HttpStatusCode.OK)
        {
            selectedWindows = selectedWindows.Where(x => x.Id != id).ToList();
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Successfull", Detail = "Deleted Successfully", Duration = 5000 });
        }
        StateHasChanged();
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {

    }

    void Close(dynamic result)
    {

    }
    public void Dispose()
    {
        DialogService.OnOpen -= Open;
        DialogService.OnClose -= Close;
    }
}
